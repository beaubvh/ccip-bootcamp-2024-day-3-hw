/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  SwapTestnetUSDC,
  SwapTestnetUSDCInterface,
} from "../../../contracts/SwapTestnetUSDC.sol/SwapTestnetUSDC";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "usdcToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "compoundUsdcToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "fauceteer",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
    ],
    name: "AddressEmptyCode",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "AddressInsufficientBalance",
    type: "error",
  },
  {
    inputs: [],
    name: "FailedInnerCall",
    type: "error",
  },
  {
    inputs: [],
    name: "ReentrancyGuardReentrantCall",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "SafeERC20FailedOperation",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "tokenIn",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "tokenOut",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "trader",
        type: "address",
      },
    ],
    name: "Swap",
    type: "event",
  },
  {
    inputs: [],
    name: "getSupportedTokens",
    outputs: [
      {
        internalType: "address",
        name: "usdcToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "compoundUsdcToken",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenIn",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenOut",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "swap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c060405234801561000f575f80fd5b5060405161077a38038061077a83398101604081905261002e916100ba565b60015f556001600160a01b0383811660805282811660a08190526040516333d2e68360e11b81526004810191909152908216906367a5cd06906024015f604051808303815f87803b158015610081575f80fd5b505af1158015610093573d5f803e3d5ffd5b505050505050506100fa565b80516001600160a01b03811681146100b5575f80fd5b919050565b5f805f606084860312156100cc575f80fd5b6100d58461009f565b92506100e36020850161009f565b91506100f16040850161009f565b90509250925092565b60805160a0516106476101335f395f8181606b0152818160f6015261016f01525f818160460152818160bb015261013401526106475ff3fe608060405234801561000f575f80fd5b5060043610610034575f3560e01c8063d3c7c2c714610038578063df791e501461009c575b5f80fd5b604080516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811682527f000000000000000000000000000000000000000000000000000000000000000016602082015281519081900390910190f35b6100af6100aa36600461058d565b6100b1565b005b6100b96102a7565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316148061012a57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316145b610132575f80fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614806101a357507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316145b6101ab575f80fd5b6101c06001600160a01b0384163330846102e8565b6040517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018290526001600160a01b0383169063a9059cbb906044016020604051808303815f875af1158015610223573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061024791906105c6565b50604080516001600160a01b038086168252841660208201529081018290523360608201527fb3822e221d737fbfd984649052a302a883d38a40f7ae591e3bcb5069eedc2a599060800160405180910390a16102a260015f55565b505050565b60025f54036102e2576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60025f55565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052610370908590610376565b50505050565b5f61038a6001600160a01b038416836103f5565b905080515f141580156103ae5750808060200190518101906103ac91906105c6565b155b156102a2576040517f5274afe70000000000000000000000000000000000000000000000000000000081526001600160a01b03841660048201526024015b60405180910390fd5b606061040283835f610409565b9392505050565b606081471015610447576040517fcd7860590000000000000000000000000000000000000000000000000000000081523060048201526024016103ec565b5f80856001600160a01b0316848660405161046291906105e5565b5f6040518083038185875af1925050503d805f811461049c576040519150601f19603f3d011682016040523d82523d5f602084013e6104a1565b606091505b50915091506104b18683836104bb565b9695505050505050565b6060826104d0576104cb82610530565b610402565b81511580156104e757506001600160a01b0384163b155b15610529576040517f9996b3150000000000000000000000000000000000000000000000000000000081526001600160a01b03851660048201526024016103ec565b5080610402565b8051156105405780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80356001600160a01b0381168114610588575f80fd5b919050565b5f805f6060848603121561059f575f80fd5b6105a884610572565b92506105b660208501610572565b9150604084013590509250925092565b5f602082840312156105d6575f80fd5b81518015158114610402575f80fd5b5f82515f5b8181101561060457602081860181015185830152016105ea565b505f92019182525091905056fea26469706673582212202eba57cecdefbc8f372229bf06fc0995f21dbbe681e9e7d2db4ae6218113e75864736f6c63430008140033";

type SwapTestnetUSDCConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SwapTestnetUSDCConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SwapTestnetUSDC__factory extends ContractFactory {
  constructor(...args: SwapTestnetUSDCConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    usdcToken: PromiseOrValue<string>,
    compoundUsdcToken: PromiseOrValue<string>,
    fauceteer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SwapTestnetUSDC> {
    return super.deploy(
      usdcToken,
      compoundUsdcToken,
      fauceteer,
      overrides || {}
    ) as Promise<SwapTestnetUSDC>;
  }
  override getDeployTransaction(
    usdcToken: PromiseOrValue<string>,
    compoundUsdcToken: PromiseOrValue<string>,
    fauceteer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      usdcToken,
      compoundUsdcToken,
      fauceteer,
      overrides || {}
    );
  }
  override attach(address: string): SwapTestnetUSDC {
    return super.attach(address) as SwapTestnetUSDC;
  }
  override connect(signer: Signer): SwapTestnetUSDC__factory {
    return super.connect(signer) as SwapTestnetUSDC__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SwapTestnetUSDCInterface {
    return new utils.Interface(_abi) as SwapTestnetUSDCInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SwapTestnetUSDC {
    return new Contract(address, _abi, signerOrProvider) as SwapTestnetUSDC;
  }
}
