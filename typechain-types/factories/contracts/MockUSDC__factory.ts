/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { MockUSDC, MockUSDCInterface } from "../../contracts/MockUSDC";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "initialSupply",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "allowance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientAllowance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "approver",
        type: "address",
      },
    ],
    name: "ERC20InvalidApprover",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "ERC20InvalidReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSpender",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801562000010575f80fd5b5060405162000b6d38038062000b6d83398101604081905262000033916200021c565b604051806040016040528060088152602001672aa9a21021b7b4b760c11b815250604051806040016040528060048152602001635553444360e01b8152508160039081620000829190620002d4565b506004620000918282620002d4565b505050620000a63382620000ad60201b60201c565b50620003c2565b6001600160a01b038216620000dc5760405163ec442f0560e01b81525f60048201526024015b60405180910390fd5b620000e95f8383620000ed565b5050565b6001600160a01b0383166200011b578060025f8282546200010f91906200039c565b909155506200018d9050565b6001600160a01b0383165f90815260208190526040902054818110156200016f5760405163391434e360e21b81526001600160a01b03851660048201526024810182905260448101839052606401620000d3565b6001600160a01b0384165f9081526020819052604090209082900390555b6001600160a01b038216620001ab57600280548290039055620001c9565b6001600160a01b0382165f9081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516200020f91815260200190565b60405180910390a3505050565b5f602082840312156200022d575f80fd5b5051919050565b634e487b7160e01b5f52604160045260245ffd5b600181811c908216806200025d57607f821691505b6020821081036200027c57634e487b7160e01b5f52602260045260245ffd5b50919050565b601f821115620002cf575f81815260208120601f850160051c81016020861015620002aa5750805b601f850160051c820191505b81811015620002cb57828155600101620002b6565b5050505b505050565b81516001600160401b03811115620002f057620002f062000234565b620003088162000301845462000248565b8462000282565b602080601f8311600181146200033e575f8415620003265750858301515b5f19600386901b1c1916600185901b178555620002cb565b5f85815260208120601f198616915b828110156200036e578886015182559484019460019091019084016200034d565b50858210156200038c57878501515f19600388901b60f8161c191681555b5050505050600190811b01905550565b80820180821115620003bc57634e487b7160e01b5f52601160045260245ffd5b92915050565b61079d80620003d05f395ff3fe608060405234801561000f575f80fd5b506004361061009f575f3560e01c8063313ce5671161007257806395d89b411161005857806395d89b4114610140578063a9059cbb14610148578063dd62ed3e1461015b575f80fd5b8063313ce5671461010957806370a0823114610118575f80fd5b806306fdde03146100a3578063095ea7b3146100c157806318160ddd146100e457806323b872dd146100f6575b5f80fd5b6100ab610193565b6040516100b891906105f8565b60405180910390f35b6100d46100cf36600461065e565b610223565b60405190151581526020016100b8565b6002545b6040519081526020016100b8565b6100d4610104366004610686565b61023c565b604051601281526020016100b8565b6100e86101263660046106bf565b6001600160a01b03165f9081526020819052604090205490565b6100ab61025f565b6100d461015636600461065e565b61026e565b6100e86101693660046106df565b6001600160a01b039182165f90815260016020908152604080832093909416825291909152205490565b6060600380546101a290610710565b80601f01602080910402602001604051908101604052809291908181526020018280546101ce90610710565b80156102195780601f106101f057610100808354040283529160200191610219565b820191905f5260205f20905b8154815290600101906020018083116101fc57829003601f168201915b5050505050905090565b5f3361023081858561027b565b60019150505b92915050565b5f3361024985828561028d565b610254858585610326565b506001949350505050565b6060600480546101a290610710565b5f33610230818585610326565b61028883838360016103b5565b505050565b6001600160a01b038381165f908152600160209081526040808320938616835292905220545f1981146103205781811015610312576040517ffb8f41b20000000000000000000000000000000000000000000000000000000081526001600160a01b038416600482015260248101829052604481018390526064015b60405180910390fd5b61032084848484035f6103b5565b50505050565b6001600160a01b038316610368576040517f96c6fd1e0000000000000000000000000000000000000000000000000000000081525f6004820152602401610309565b6001600160a01b0382166103aa576040517fec442f050000000000000000000000000000000000000000000000000000000081525f6004820152602401610309565b6102888383836104b9565b6001600160a01b0384166103f7576040517fe602df050000000000000000000000000000000000000000000000000000000081525f6004820152602401610309565b6001600160a01b038316610439576040517f94280d620000000000000000000000000000000000000000000000000000000081525f6004820152602401610309565b6001600160a01b038085165f908152600160209081526040808320938716835292905220829055801561032057826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516104ab91815260200190565b60405180910390a350505050565b6001600160a01b0383166104e3578060025f8282546104d89190610748565b9091555061056c9050565b6001600160a01b0383165f908152602081905260409020548181101561054e576040517fe450d38c0000000000000000000000000000000000000000000000000000000081526001600160a01b03851660048201526024810182905260448101839052606401610309565b6001600160a01b0384165f9081526020819052604090209082900390555b6001600160a01b038216610588576002805482900390556105a6565b6001600160a01b0382165f9081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516105eb91815260200190565b60405180910390a3505050565b5f6020808352835180828501525f5b8181101561062357858101830151858201604001528201610607565b505f604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b0381168114610659575f80fd5b919050565b5f806040838503121561066f575f80fd5b61067883610643565b946020939093013593505050565b5f805f60608486031215610698575f80fd5b6106a184610643565b92506106af60208501610643565b9150604084013590509250925092565b5f602082840312156106cf575f80fd5b6106d882610643565b9392505050565b5f80604083850312156106f0575f80fd5b6106f983610643565b915061070760208401610643565b90509250929050565b600181811c9082168061072457607f821691505b60208210810361074257634e487b7160e01b5f52602260045260245ffd5b50919050565b8082018082111561023657634e487b7160e01b5f52601160045260245ffdfea2646970667358221220aee9f698757efb4b221d37dd831ce4387b0c06abc441b6b2cd5f7e58225b765f64736f6c63430008140033";

type MockUSDCConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockUSDCConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockUSDC__factory extends ContractFactory {
  constructor(...args: MockUSDCConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    initialSupply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockUSDC> {
    return super.deploy(initialSupply, overrides || {}) as Promise<MockUSDC>;
  }
  override getDeployTransaction(
    initialSupply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(initialSupply, overrides || {});
  }
  override attach(address: string): MockUSDC {
    return super.attach(address) as MockUSDC;
  }
  override connect(signer: Signer): MockUSDC__factory {
    return super.connect(signer) as MockUSDC__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockUSDCInterface {
    return new utils.Interface(_abi) as MockUSDCInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockUSDC {
    return new Contract(address, _abi, signerOrProvider) as MockUSDC;
  }
}
